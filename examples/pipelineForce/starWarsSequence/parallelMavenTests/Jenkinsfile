pipeline
{
    options
    {
        buildDiscarder(logRotator(numToKeepStr: '3'))
        ansiColor('xterm')
        timestamps()
    }

    agent any
    stages
    {
        stage('Setup')
        {
            steps
            {
                checkout([$class: 'GitSCM', branches: [[name: 'master']],
                          userRemoteConfigs: [[url: 'https://github.com/tikalk/pipelineForceCode']]
                ])
            }
        }
        stage('Code build')
        {
            steps
            {
                withMaven(jdk: 'jdk8u131', maven: 'mvn350')
                {
                    dir("java/starWarsSequence")
                    {
                        sh "mvn clean install -DskipTests"
                    }
                }
            }
        }
        stage('Unit tests')
        {
            steps
            {
                withMaven(jdk: 'jdk8u131', maven: 'mvn350')
                {
                    dir("java/starWarsSequence")
                    {
                        script
                        {
                            sh "find src/test -name '*Test.java' > tstFiles"
                            List<String> tstFiles=readFile('tstFiles').split()
                            int numberOfFiles = tstFiles.size()
                            echo "Number of test files: ${numberOfFiles}"

                            def tests = [:]
                            for (int i = 0; i < tstFiles.size(); i++) {
                                testFileName=tstFiles.get(i)
                                def filePath = testFileName
                                int index = i
                                def filename = testFileName.substring(testFileName.lastIndexOf(File.separator) + 1).replace(".java","")
                                stage ("Test: ${filename}")
                                {
                                    tests[filename] =
                                    {
                                        echo "Test: ${filePath} Sleep: ${index}"
                                        sleep(index)
                                        sh "mvn -Dtest=${filename} test"
                                    }
                                }
                            }
                            try
                            {
                                parallel tests
                            }
                            catch (error)
                            {

                            }

                        }
                    }
                }
            }
        }
    }
    post
    {
        always
        {
            archiveArtifacts '**/target/**/starWarsSequence-*.jar'
        }
    }
}
